

#include "app.h"
#include "stm32f4xx_sdio.h"
#include "stm32f4xx_dma.h"
#include "stm32f4xx_i2c.h"
#include "iwdg.h"
#include "byte_fifo.h"
#include "uart.h"
#include "in_flash_manage.h"
#include "rng.h"
#include "cJSON.h"
#include "malloc.h"
#include "stdio.h"
#include "string.h"
#include "stdlib.h"
#include "protocol_uart.h"
#include "fifo_bytes.h"
#include "bytes_fifo_malloc.h"
#include "mqttclient.h"

//void process_register_msg(void);
//====================================================================================


volatile uint8_t open_relay=0;
void delay_us1(u32 nus)
{
    unsigned short i=0;
    while(nus--)
    {
        i=10;
        while(i--) ;
    }
}

void delay_ms1(u16 nms)
{
    unsigned short i=0;
    while(nms--)
    {
        i=12000;
        while(i--) ;
    }
}


void LED_Init(void)
{


//led bin relay

//    GPIO_InitTypeDef  GPIO_InitStructure;

//    /* Enable the GPIO_LED Clock */
//    RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);


//    /* Configure the GPIO_LED pin */
//    GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
//    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
//    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
//    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//    GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);



    GPIO_InitTypeDef  GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);//使能GPIOF时钟
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);//使能GPIOF时钟
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);//使能GPIOF时钟

    //GPIOF9,F10初始化设置
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;//LED0和LED1对应IO口
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//普通输出模式
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
    GPIO_Init(GPIOD, &GPIO_InitStructure);//初始化GPIO

    GPIO_SetBits(GPIOF,GPIO_Pin_13 | GPIO_Pin_14);//GPIOF9,F10设置高，灯灭

    //GPIOF9,F10初始化设置
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;//LED0和LED1对应IO口
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//普通输出模式
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
    GPIO_Init(GPIOC, &GPIO_InitStructure);//初始化GPIO

    GPIO_SetBits(GPIOC,GPIO_Pin_6 | GPIO_Pin_7);//GPIOF9,F10设置高，灯灭


    //GPIOF9,F10初始化设置
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 ;//LED0和LED1对应IO口
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//普通输出模式
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
    GPIO_Init(GPIOE, &GPIO_InitStructure);//初始化GPIO

    GPIO_SetBits(GPIOE,GPIO_Pin_9 );//GPIOF9,F10设置高，灯灭


    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15 ;//LED0和LED1对应IO口
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//普通输出模式
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
    GPIO_Init(GPIOD, &GPIO_InitStructure);//初始化GPIO

    GPIO_SetBits(GPIOD,GPIO_Pin_15 );//GPIOF9,F10设置高，灯灭


    LED1_OFF();
    LED2_OFF();
    LED3_OFF();
    LED4_OFF();
    BEEN_OFF();
    RELAY_OFF();

}

void Delay(uint32_t nCount)
{
    vTaskDelay(nCount);
}


void Beep(void)
{
    BEEN_ON();
    vTaskDelay(500/portTICK_RATE_MS);
    BEEN_OFF();
}










#include "app.h"


STU_485_REV Stu485rev;




uint16_t get_register_packet(uint8_t *buf)
{
#if 0
//uint8_t *pd;

//{
    "msg_type": 8000,
    "msg_uuid": 8909384,
"mac_address": "xxxxxx"
}
#endif
return sprintf((char*)buf,"{\"msg_type\":8000,\"msg_uuid\":%d,\"mac_address\":\"%x%x%x%x%x%x\"}",\
               RNG_Get_RandomNum()%100000,
               StuHis.StuPara.mac[0],\
               StuHis.StuPara.mac[1],\
               StuHis.StuPara.mac[2],\
               StuHis.StuPara.mac[3],\
               StuHis.StuPara.mac[4],\
               StuHis.StuPara.mac[5]);


}



const uint16_t available_cmds[]= {CMD_FOOD_IN2000,\
                                  CMD_FOOD_OUT2002,\
                                  CMD_CTL_LED2004,\
                                  CMD_CTL_UI2006,\
                                  CMD_CTL_ZERO2008,\
                                  CMD_CTL_ONLINE2010,\
                                  CMD_RD_SENSORS2012,\
                                  CMD_ST_PERIOD2014,\
                                  REQUEST_NET_INFOR_3000,\
                                  REQUEST_DEVICE_INFOR_3002,\
                                  REQUEST_MQTT_INFOR_3004
                                 };

bool is_right_cmd(uint16_t cmd)
{
    uint8_t i;
    for(i=0; i<sizeof(available_cmds); i++)
    {
        if(cmd==available_cmds[i])
            return true;

    }

    printf("msg_type cmd err:%d\r\n",cmd);
    return false;
}

// 删除长度为len的数组dat中索引为idx的元素。
void remove_array_index(uint8_t *dat, uint16_t *len, int idx)
{
    (*len)--;
    if (idx < 0 || idx >= *len)
        return;
    for (int i = idx; i < *len; i++)
        dat[i] = dat[i+1];
}

/*
int cmd                    --->CMD_FOOD_IN2000  or CMD_FOOD_OUT2002
int msg_uuid             ---> int type
uint8_t feed_id          --->int device uuid
int real_amount         --->int unit g
uint8_t motorstate     ---> 0--->ok   1--->堵转
,uint32_t gsensro       ---> 0.01精度
uint8_t code             --->0-->ok    10-->饲喂器故障9--->饲喂器超时   8--->饲喂器不在线
*/
void send_result_to_net(int cmd,int msg_uuid,uint8_t feed_id,int real_amount,uint32_t gsensro,uint8_t code)
{
    uint16_t len;
    uint8_t*pbuf;
    float ss;
    ss=gsensro;
    ss=ss/100;
    if(0xffff==gsensro)
    {
        ss=-1000;
    }
    pbuf=mymalloc_mmc(500);

    if(0==code)
        len=sprintf((char*)pbuf,"{\"msg_type\":%d,\"msg_uuid\":%d,\"feeder_id\":\"%03d\",\"real_amount\":%d,\"motor\":%d,\"g_sensor\":%.2f,\"code\":%d}",1+cmd,msg_uuid,feed_id,real_amount,0,ss,code);
    else
        len=sprintf((char*)pbuf,"{\"msg_type\":%d,\"msg_uuid\":%d,\"feeder_id\":\"%03d\",\"code\":%d}",1+cmd,msg_uuid,feed_id,code);

    queue_malloc_in(&stu_queue_malloc_tx,pbuf,len);

    myfree_mmc(pbuf);


}

static void  pack_sensor_packet(STU_DATAS studata,uint8_t *pbuf,uint16_t *plen,int send_cmd,int msg_uuid,uint8_t feed_id)
{
    int16_t tmp16,tmp16_2,tmp16_3,tmp2[3],tatol,pbuf_len,startp;


    float tmpf[3];

    if(studata.len==0)
    {

        *plen=sprintf((char*)pbuf,"{\"msg_type\":%04d,\"msg_uuid\":%d,\"feeder_id\":\"%03d\",\"code\":%d}",send_cmd,msg_uuid,feed_id,DEVICE_NOT_ONLINE);
        return;
    }


    tatol=0;
    pbuf_len=0;
    startp=16;


    tmp16=studata.pdata[startp+3];
    tmp16=(tmp16<<8)|studata.pdata[startp+4];
    if(studata.pdata[startp+3] == 0xff && studata.pdata[startp+4]==0xff)
        tmp16=-1000;

    tmp2[0]=studata.pdata[startp+1];
    tmp2[0]=(tmp2[0]<<8)|studata.pdata[startp+2];
    tmpf[0]=tmp2[0];
    if(0xffff==tmp2[0])
    {
        tmpf[0]=-1000;
    }
    else
    {
        tmpf[0]=tmpf[0]/100;
    }

    tatol=sprintf((char*)pbuf+pbuf_len,"{\"msg_type\":%04d,\"msg_uuid\":%d,\"feeder_id\":\"%03d\",\"feeder_mac\":\"%02X%02X%02X\",\"device_status\":%d,\"g-sensor\":%.2f,\"weight\":%d,",send_cmd,msg_uuid,feed_id,\
                  studata.pdata[1], studata.pdata[2], studata.pdata[3],\
                  (studata.pdata[startp]==0xff)? -1000:studata.pdata[startp],\
                  tmpf[0],\
                  tmp16);
    //======================================================================================================

    startp+=5;//16
    //21

    pbuf_len+=tatol;
    tatol=sprintf((char*)pbuf+pbuf_len,"\"humidity\":%d,\"env_temp\":%d,\"pig_temp\":%d,\"sow_action\":%d,\"boar_action\":%d,",\
                  (studata.pdata[startp]==0xff)? -1000:studata.pdata[startp],\
                  (studata.pdata[startp+1]==0xff)? -1000:studata.pdata[startp+1],\
                  (studata.pdata[startp+2]==0xff)? -1000:studata.pdata[startp+2],\
                  (studata.pdata[startp+3]==0xff)? -1000:studata.pdata[startp+3],\
                  (studata.pdata[startp+4]==0xff)? -1000:studata.pdata[startp+4]
                 );

    startp+=5;//
    pbuf_len+=tatol;

    tmp16=studata.pdata[startp];
    tmp16=(tmp16<<8)|studata.pdata[startp+1];
    tmp16_2=studata.pdata[startp+2];
    tmp16_2=(tmp16_2<<8)|studata.pdata[startp+3];
    tmp16_3=studata.pdata[startp+4];
    tmp16_3=(tmp16_3<<8)|studata.pdata[startp+5];

    if(tmp16==0xffff)
        tmp16=-1000;
    if(tmp16_2==0xffff)
        tmp16_2=-1000;
    if(tmp16_3==0xffff)
        tmp16_3=-1000;

    startp+=6;


    tmp2[0]=studata.pdata[startp];//34
    tmp2[0]=(tmp2[0]<<8)|studata.pdata[startp+1];

    tmp2[1]=studata.pdata[startp+2];
    tmp2[1]=(tmp2[1]<<8)|studata.pdata[startp+3];

    tmp2[2]=studata.pdata[startp+4];
    tmp2[2]=(tmp2[2]<<8)|studata.pdata[startp+5];
    startp+=6;


    if(tmp2[0]==0xffff)
    {
        tmpf[0]=-1000;
    }
    else
    {
        tmpf[0]=tmp2[0];
        tmpf[0]=tmpf[0]/100;

    }
    if(tmp2[1]==0xffff)
    {
        tmpf[1]=-1000;
    }
    else
    {
        tmpf[1]=tmp2[1];
        tmpf[1]=tmpf[1]/10;

    }
    if(tmp2[2]==0xffff)
    {
        tmpf[2]=-1000;
    }
    else
    {

        tmpf[2]=tmp2[2];
        tmpf[2]=tmpf[2]/10;

    }








    tatol=sprintf((char*)pbuf+pbuf_len,"\"distance_1\":%d,\"distance_2\":%d,\"distance_vertical\":%d,\"NH3\":%.2f,\"CO2\":%.1f,\"illumination\":%.1f}",\
                  tmp16,tmp16_2,tmp16_3,tmpf[0],tmpf[1],tmpf[2]);
    pbuf_len+=tatol;

    *plen=pbuf_len;

}


void send_result_to_net1(int cmd,int msg_uuid,uint8_t feed_id,uint8_t code,STU_DATAS studata)
{

    uint16_t len;
    uint8_t*pbuf;
    char *sortware_version,*hardware_version,*str_mac;
    /*
            {
            IP4_ADDR(&ipaddr, StuHis.StuPara.ip[0],StuHis.StuPara.ip[1], StuHis.StuPara.ip[2], StuHis.StuPara.ip[3] );
            IP4_ADDR(&netmask, StuHis.StuPara.netmask[0], StuHis.StuPara.netmask[1], StuHis.StuPara.netmask[2], StuHis.StuPara.netmask[3]);
            IP4_ADDR(&gw,StuHis.StuPara.gateway[0],StuHis.StuPara.gateway[1], StuHis.StuPara.gateway[2], StuHis.StuPara.gateway[3]);
    const uint8_t version[12] __attribute__ ((at(0x8020000+1024)))={VERSION_H,VERSION_L,VERSION_T,'2','d','a','n',HARDWARE_VERSION_H,HARDWARE_VERSION_L,HARDWARE_VERSION_T};
        StuHis.StuPara.mac[0] =8;
        StuHis.StuPara.mac[1] = 0;
        StuHis.StuPara.mac[2] =9;
        StuHis.StuPara.mac[3] = ptmp8[2];
        StuHis.StuPara.mac[4] = ptmp8[1];
        StuHis.StuPara.mac[5] = ptmp8[0];


        */
    if(CMD_CTL_ONLINE2010==cmd)  return;

    pbuf=mymalloc_mmc(500);
    if(CMD_RD_SENSORS2012==cmd)
    {
        pack_sensor_packet(studata,pbuf,&len,cmd+1,msg_uuid,feed_id);
    }
    else    if(REQUEST_NET_INFOR_3000==cmd)
    {
        sortware_version=mymalloc_mmc(50);
        hardware_version=mymalloc_mmc(50);
        str_mac=mymalloc_mmc(50);
        memset(sortware_version,0,50);
        memset(hardware_version,0,50);
        memset(str_mac,0,50);


        sprintf(sortware_version,"%d.%d.%d",version[0],version[1],version[2]);
        sprintf(hardware_version,"%d.%d.%d",version[7],version[8],version[9]);
        sprintf(str_mac,"%02X%02X%02X%02X%02X%02X",StuHis.StuPara.mac[0],StuHis.StuPara.mac[1],StuHis.StuPara.mac[2],\
                StuHis.StuPara.mac[3],StuHis.StuPara.mac[4],StuHis.StuPara.mac[5]);

        len=sprintf((char*)pbuf,"{\"msg_type\":%04d,\"msg_uuid\":%d,\"remote_ip\":\"%s\",\"remote port\":%d,\"software version\":%s,\"hardware version\":%s,\"mac\":%s,\"code\"%d}", \
                    cmd+1,msg_uuid,&StuHis.StuPara.remote_ip[0],StuHis.StuPara.remote_port,sortware_version,hardware_version,str_mac,code);
        myfree_mmc(sortware_version);
        myfree_mmc(hardware_version);
        myfree_mmc(str_mac);


    }
    else    if(REQUEST_DEVICE_INFOR_3002==cmd && 0==code)
    {
        sortware_version=mymalloc_mmc(50);
        hardware_version=mymalloc_mmc(50);
        str_mac=mymalloc_mmc(50);
        memset(sortware_version,0,50);
        memset(hardware_version,0,50);
        memset(str_mac,0,50);


        sprintf(sortware_version,"%d.%d.%d",studata.pdata[16],studata.pdata[17],studata.pdata[18]);
        sprintf(hardware_version,"%d.%d.%d",studata.pdata[19],studata.pdata[20],studata.pdata[21]);
        sprintf(str_mac,"%02X%02X%02X",studata.pdata[1],studata.pdata[2],studata.pdata[3]);

        len=sprintf((char*)pbuf,"{\"msg_type\":%04d,\"msg_uuid\":%d,\"feeder_id\":\"%03d\",\"software version\":%s,\"hardware version\":%s,\"feeder_mac\":%s,\"code\"%d}", \
                    cmd+1,msg_uuid,studata.pdata[0],sortware_version,hardware_version,str_mac,code);
        myfree_mmc(sortware_version);
        myfree_mmc(hardware_version);
        myfree_mmc(str_mac);
    }
    else if (REQUEST_MQTT_INFOR_3004 == cmd )
    {
        len=sprintf((char*)pbuf,"{\"msg_type\":%04d,\"msg_uuid\":%d,\"code\":%d}",cmd+1,msg_uuid,code);
    }
    else
    {
        len=sprintf((char*)pbuf,"{\"msg_type\":%04d,\"msg_uuid\":%d,\"feeder_id\":\"%03d\",\"code\":%d}",cmd+1,msg_uuid,feed_id,code);
    }


    queue_malloc_in(&stu_queue_malloc_tx,pbuf,len);

    myfree_mmc(pbuf);


}






#define SUPPORT_LIST  20

typedef struct
{
    int cmd;
    int msg_uuid;
    uint8_t feed_id;
    uint32_t escape_sec;
} STU_WAIT_CMD_DATA;


typedef struct
{
    STU_WAIT_CMD_DATA stu_wait_cmd_data[SUPPORT_LIST];
    uint8_t lists;

} STU_WAIT_CMD;

STU_WAIT_CMD stu_wait_cmd=
{
    .lists=0,
};

static void add_id2wait_list(int cmd,int msg_uuid,uint8_t feed_id)
{
    STU_WAIT_CMD_DATA stu_data;

    stu_data.cmd=cmd;
    stu_data.msg_uuid=msg_uuid;
    stu_data.feed_id=feed_id;
    stu_data.escape_sec=0;


    stu_wait_cmd.stu_wait_cmd_data[stu_wait_cmd.lists]=stu_data;
    stu_wait_cmd.lists++;
    stu_wait_cmd.lists%=SUPPORT_LIST;
}



static void delete_id_from_wait_list(uint8_t index)
{

    uint8_t i;
    stu_wait_cmd.lists--;
    if (index < 0 || index >= stu_wait_cmd.lists)
        return;
    for ( i = index; i < stu_wait_cmd.lists; i++)
    {
        stu_wait_cmd.stu_wait_cmd_data[i] = stu_wait_cmd.stu_wait_cmd_data[i+1];
    }




}



static void check_wiat_list_result(void)
{
    uint32_t tmp32;
    uint16_t tmp16;

    uint8_t i,j;
    STU_WAIT_CMD_DATA stu_data;

    if(0==stu_wait_cmd.lists)  return;



    for(i=0; i<stu_wait_cmd.lists; i++)
    {
        stu_wait_cmd.stu_wait_cmd_data[i].escape_sec++;
        stu_data=stu_wait_cmd.stu_wait_cmd_data[i];
        prepare_wait_485_cmd(stu_data.feed_id);

        for(j=0; j<2; j++)
        {

        #if 0
            send_cmd_read_foods2pigs(GATE_RD_RESULT38,stu_data.feed_id,(stu_data.cmd==CMD_FOOD_OUT2002)?1:0);
            if(true==wait_485_cmd(PIGS_FOODS_RESULT,WAIT_PIG_TIME,stu_data.feed_id))
            {
                if(Stu485rev.data[19]==0 || Stu485rev.data[19]==2)
                {
                    if(Stu485rev.data[19]==2)
                    {
                        send_result_to_net(stu_data.cmd,stu_data.msg_uuid,stu_data.feed_id,0,0,DEVICE_MOTOR_ERR);
                        delete_id_from_wait_list(i);
                    }
                    else
                    {
                        tmp16=Stu485rev.data[17];
                        tmp16=(tmp16<<8)|Stu485rev.data[18];
                        tmp32=Stu485rev.data[20];
                        tmp32=(tmp32<<8)|Stu485rev.data[21];
                        send_result_to_net(stu_data.cmd,stu_data.msg_uuid,stu_data.feed_id,tmp16,tmp32,0);
                        delete_id_from_wait_list(i);
                    }
                }
                break;
            }
            #else
            send_cmd_read_foods2pigs(GATE_RD_RESULT38,stu_data.feed_id,(stu_data.cmd==CMD_FOOD_OUT2002)?1:0);
            if(true==wait_485_cmd(PIGS_FOODS_RESULT,WAIT_PIG_TIME,stu_data.feed_id))
            {
                if(Stu485rev.data[19]==0 || Stu485rev.data[19]==2)
                {
                    if(Stu485rev.data[19]==2)
                    {
                        send_result_to_net(stu_data.cmd,stu_data.msg_uuid,stu_data.feed_id,0,0,DEVICE_MOTOR_ERR);
                        delete_id_from_wait_list(i);
                    }
                    else
                    {
                        tmp16=Stu485rev.data[17];
                        tmp16=(tmp16<<8)|Stu485rev.data[18];
                        tmp32=Stu485rev.data[20];
                        tmp32=(tmp32<<8)|Stu485rev.data[21];
                        send_result_to_net(stu_data.cmd,stu_data.msg_uuid,stu_data.feed_id,tmp16,tmp32,0);
                        delete_id_from_wait_list(i);
                    }
                }
                break;
            }


            #endif
        }
        if(  stu_data.escape_sec >= ASK_FOOD_RESULT_TIMEOUT_SEC)//time out
        {
            printf("get result timeout %d\r\n",stu_data.feed_id);
            send_result_to_net(stu_data.cmd,stu_data.msg_uuid,stu_data.feed_id,0,0,DEVICE_TIME_OUT);
            delete_id_from_wait_list(i);
            continue ;

        }

    }



}


//响应进料出料命令
void process_food_in_out(int cmd,int feed_id,int amount,int msg_uuid)
{
    uint32_t curtick,tmp32;
    uint16_t j,tmp16;


    uint8_t cmd485=GATE_FOOD_OUT33;
    if(cmd==CMD_FOOD_IN2000)
    {
        cmd485=GATE_FOOD_IN32;
    }



//     1.send food msg 2 pigs
    prepare_wait_485_cmd(feed_id);
    for(j=0; j<3; j++)
    {
        send_food2pigs(cmd485,amount,feed_id);
        if(true==wait_485_cmd(PIGS_ACK,WAIT_PIG_TIME,feed_id))
        {
            break;
        }
    }


//    2.get onlines 2 list3
    if(Stu485rev.cmd!=PIGS_ACK)
    {
        send_result_to_net(cmd,msg_uuid,feed_id,0,0,DEVICE_NOT_ONLINE);
        return;
    }


    add_id2wait_list(cmd,msg_uuid,feed_id);


#if 0
//  3.get food result,timer out or get result return
    curtick=xTaskGetTickCount();
    while(1)
    {
        prepare_wait_485_cmd(feed_id);
        for(j=0; j<3; j++)
        {
            send_cmd_read_foods2pigs(GATE_RD_RESULT38,feed_id,(cmd==CMD_FOOD_OUT2002)?1:0);
            if(true==wait_485_cmd(PIGS_FOODS_RESULT,WAIT_PIG_TIME,feed_id))
            {
                if(Stu485rev.data[19]==0 || Stu485rev.data[19]==2)
                {
                    if(Stu485rev.data[19]==2)
                    {
                        send_result_to_net(cmd,msg_uuid,feed_id,0,0,DEVICE_MOTOR_ERR);
                    }
                    else
                    {
                        tmp16=Stu485rev.data[17];
                        tmp16=(tmp16<<8)|Stu485rev.data[18];
                        tmp32=Stu485rev.data[20];
                        tmp32=(tmp32<<8)|Stu485rev.data[21];
                        send_result_to_net(cmd,msg_uuid,feed_id,tmp16,tmp32,0);
                    }
                    return ;
                }

            }
        }
        if((xTaskGetTickCount() - curtick) >= ASK_FOOD_RESULT_TIMEOUT_MS)//time out
        {
            printf("get result timeout %d\r\n",feed_id);
            send_result_to_net(cmd,msg_uuid,feed_id,0,0,DEVICE_TIME_OUT);
            return ;

        }
        IWDG_Feed();
    }
#endif




}




static uint8_t send_data2pigs(int cmd,uint16_t foods,uint8_t key)
{


    switch(cmd)
    {

        case CMD_CTL_LED2004:
        case CMD_CTL_UI2006:
            send_led_lcd2pigs((cmd==CMD_CTL_LED2004)? GATE_CTL_LED34 : GATE_CTL_LCD35,(uint8_t)foods,key);
            return PIGS_ACK;
        case CMD_CTL_ZERO2008:
            send_cmd2pigs(GATE_CTL_ZERO36,key);
            return PIGS_ACK;
        case CMD_ST_PERIOD2014:
            send_led_lcd2pigs(GATE_ST_PERIOD3A,foods,key);
            return PIGS_ACK;
        case  REQUEST_DEVICE_INFOR_3002:
        case  CMD_CTL_ONLINE2010:
            send_cmd2pigs(GATE_RD_INFO39,key);
            return PIGS_NFO;
        case CMD_RD_SENSORS2012:
            send_cmd2pigs(GATE_RD_SENSORS37,key);
            return PIGS_SENSORS;



    }
    printf("err======>%s-%d\r\n",__FILE__,__LINE__);
    return 0;


}


//响应进料出料命令
void process_led_period(int cmd,int feed_id,int amount,int msg_uuid)
{

    uint16_t j;
    uint8_t wait_cmd;
    STU_DATAS studatas;
//     1.send food msg 2 pigs
    prepare_wait_485_cmd(feed_id);
    for(j=0; j<3; j++)
    {
        wait_cmd= send_data2pigs(cmd,amount,feed_id);
        if(true==wait_485_cmd(wait_cmd,WAIT_PIG_TIME,feed_id))
        {
            break;
        }
    }


//    2.get onlines 2 list3
    send_result_to_net1(cmd,msg_uuid,feed_id,Stu485rev.cmd!=wait_cmd?DEVICE_NOT_ONLINE:0,studatas);



}


void process_ask_pigs_info(int cmd,int feed_id,int amount,int msg_uuid)
{

    uint16_t j;
    uint8_t wait_cmd;
    STU_DATAS studatas;
//     1.send food msg 2 pigs
    prepare_wait_485_cmd(feed_id);
    for(j=0; j<3; j++)
    {
        wait_cmd= send_data2pigs(cmd,amount,feed_id);
        if(true==wait_485_cmd(wait_cmd,WAIT_PIG_TIME,feed_id))
        {
            studatas.pdata=Stu485rev.data;
            studatas.len=Stu485rev.len;
            break;
        }
    }


//    2.get onlines 2 list3
    send_result_to_net1(cmd,msg_uuid,feed_id,Stu485rev.cmd!=wait_cmd?DEVICE_NOT_ONLINE:0,studatas);



}



void send_online_devices_to_net(uint16_t list_number2,int cmd,int msg_uuid,uint8_t *list2,uint8_t code)
{
    uint8_t *pbuf;
    uint32_t tmp32;
    uint16_t tmp16,i;
    pbuf=mymalloc_mmc(1500);
    tmp32=0;
    tmp16=sprintf((char*)pbuf,"{\"msg_type\":%04d,\"msg_uuid\":%d,\"feeders\":[",cmd+1,msg_uuid);
    for(i=0; i<list_number2; i++)
    {
        if(list2[i]!=OFFLINE_DEVICE_ID)
        {
            tmp32++;
            tmp16+=sprintf((char*)pbuf+tmp16,"%d,",list2[i]);
        }

    }
    if(tmp32==0)
    {
        pbuf[tmp16++]=']';

    }
    else
    {
        pbuf[tmp16-1]=']';
    }
    tmp16+=sprintf((char*)pbuf+tmp16,",\"code\":%d}",code);

    queue_malloc_in(&stu_queue_malloc_tx,pbuf,tmp16);
    myfree_mmc(pbuf);
}



void check_on_line(void)
{
    uint8_t i,cmd_wait,j;
//    uint8_t* list ;

    static uint8_t min=57;
    if(min++<=60) return ;

    min=0;

    for(i=0; i<MAX_DEVICE; i++)
    {
        prepare_wait_485_cmd(i);
        for(j=0; j<2; j++)
        {
            cmd_wait= send_data2pigs(CMD_CTL_ONLINE2010,0,i);
            if(true==wait_485_cmd(cmd_wait,WAIT_PIG_TIME,i))
            {


                break;
            }
        }


    }




}
void process_06_12_in_out(int cmd,uint16_t list_number,uint8_t *list,int amount,int msg_uuid)
{

    uint16_t j,i;
    uint8_t *list2;
    uint16_t list_number2;
    uint8_t cmd_wait;
    STU_DATAS *pstudatas;



    uint8_t *list_offfline;
    uint16_t list_offline_number;



    list_number2=0;
    list2 = mymalloc_mmc(LIST_SIZE);
    memset(list2,OFFLINE_DEVICE_ID,LIST_SIZE);


    list_offline_number=0;
    list_offfline = mymalloc_mmc(LIST_SIZE);


    pstudatas=mymalloc_mmc(LIST_SIZE*sizeof(STU_DATAS));
    memset(pstudatas,0,LIST_SIZE*sizeof(STU_DATAS));


//     1.send  msg 2 pigs
    for(i=0; i<list_number; i++)
    {
        prepare_wait_485_cmd(list[i]);
        for(j=0; j<2; j++)
        {
            cmd_wait= send_data2pigs(cmd,amount,list[i]);
            if(true==wait_485_cmd(cmd_wait,WAIT_PIG_TIME,list[i]))
            {
                list2[list_number2]=list[i];
                pstudatas[list_number2].len=Stu485rev.len;
                pstudatas[list_number2].pdata=mymalloc_mmc(Stu485rev.len);
                memcpy(pstudatas[list_number2].pdata,Stu485rev.data,Stu485rev.len);
                list_number2++;
                break;
            }
        }

        if(Stu485rev.cmd!=cmd_wait)
        {
            list_offfline[list_offline_number++]=list[i];
        }
        IWDG_Feed();
    }



    if(CMD_CTL_ONLINE2010==cmd)
    {
        send_online_devices_to_net(list_number2,cmd,msg_uuid,list2,0);
    }
    else
    {
        //    2.get onlines 2 list3
        for(i=0; i<list_number2; i++)
        {
            send_result_to_net1(cmd,msg_uuid,list2[i],0,pstudatas[i]);
        }

        //offline
        pstudatas[0].len=0;
        for(i=0; i<list_offline_number; i++)
        {
            send_result_to_net1(cmd,msg_uuid,list_offfline[i],DEVICE_NOT_ONLINE,pstudatas[0]);
        }

    }


//    3. release
    for(i=0; i<list_number2; i++)
    {
        if(list2[i]!=OFFLINE_DEVICE_ID)
        {
            myfree_mmc(pstudatas[i].pdata);
        }
    }


    myfree_mmc(list2);
    myfree_mmc(pstudatas);


}



void prepare_wait_485_cmd(uint8_t addr)
{
    Stu485rev.addr=addr;
    Stu485rev.cmd=0;
    Stu485rev.data[0]=0;

}

bool wait_485_cmd(uint8_t cmd,uint16_t ms,uint8_t id)
{
    uint8_t data;
    uint32_t pubtick;

    pubtick=xTaskGetTickCount();


    while(1)
    {

        while ( true==queue_byte_out(&uart_queue,&data) )
        {
            uart_unpackage_data(data,task_protocol_dataout_fun);
        }
        if((xTaskGetTickCount() - pubtick) >(ms))
        {
            return false;
        }
        if(Stu485rev.cmd==cmd && Stu485rev.data[0]==id)
        {
            return true;
        }
        delay_ms(2);

    }




}
static     uint8_t get_feed_list(int cmd,cJSON *root,uint8_t *list)
{
    uint8_t list_number=0,flg=0,i;
    cJSON *feeder_ids;

    if(cmd == CMD_CTL_UI2006 ||cmd==CMD_CTL_ZERO2008||cmd== CMD_CTL_ONLINE2010 || cmd==CMD_RD_SENSORS2012)
    {
        flg=1;

    }
    if(0==flg) return 0;
    feeder_ids     = cJSON_GetObjectItem( root, "feeder_ids");


    if(cmd == CMD_CTL_ONLINE2010 || cmd == CMD_RD_SENSORS2012)
    {
        list_number=0;
        for(i=0; i<MAX_DEVICE; i++)
            list[list_number++]=list_number;
        return list_number;
    }



    if(feeder_ids!=NULL)
    {
        int  array_size   = cJSON_GetArraySize ( feeder_ids );
        if(0==array_size)
        {
            list_number=0;
            for(i=0; i<MAX_DEVICE; i++)
                list[list_number++]=list_number;
            return list_number;
        }
        for(int iCnt = 0 ; iCnt < array_size ; iCnt ++ )
        {
            cJSON * pSub = cJSON_GetArrayItem(feeder_ids, iCnt);
            if(NULL == pSub || pSub->type!=cJSON_String)
            {

                if(NULL == pSub)
                {
                    printf("feed all pigs\r\n");
                    for(i=0; i<MAX_DEVICE; i++)
                        list[list_number++]=list_number;
                }
                continue ;
            }

            if(list_number<(LIST_SIZE-1))
                list[list_number++]=atoi(pSub->valuestring);
            printf("feeder_ids[%d] : %s  %d-%d\r\n",iCnt,pSub->valuestring,list_number-1,list[list_number-1]);
        }
    }

    return list_number;
}

void ana_net_datas(uint8_t *data,uint16_t len)
{
    STU_DATAS StuDatas;
    cJSON *msg_uuid;
    cJSON *feeder_id;
    uint16_t list_number;
    uint8_t *list;
    cJSON *root;
    cJSON *msg_type;
    cJSON *amount;

    root = cJSON_Parse((char*)data);
    if(!root)
    {
        printf("jason format err\r\n");
        return ;
    }
    list = mymalloc_mmc(LIST_SIZE);


    msg_type = cJSON_GetObjectItem(root, "msg_type");
    if( (0==msg_type)||(msg_type->type!=cJSON_Number)||(true!=is_right_cmd(msg_type->valueint) ))//  ||  ||
    {
        printf("msg_type err\r\n");
        goto END1 ;

    }

    msg_uuid = cJSON_GetObjectItem(root, "msg_uuid");
    if(!msg_uuid || msg_uuid->type!=cJSON_Number)
    {
        printf(" msg_uuid err\r\n");
        goto END1 ;
    }
    feeder_id = cJSON_GetObjectItem(root, "feeder_id");
    if(!feeder_id)
    {
        printf("no feeder_id\r\n");
        list_number=get_feed_list(msg_type->valueint,root,list);

    }
    else if(feeder_id->type!=cJSON_String)
    {
        printf("feeder_id err\r\n");
        goto END1 ;
    }

    switch(msg_type->valueint)
    {
        case CMD_FOOD_IN2000:
        case CMD_FOOD_OUT2002:
            amount     = cJSON_GetObjectItem( root, "amount");
            if(amount==NULL ||amount->type!=cJSON_Number)
            {
                printf("amount null err :%s %d\r\n",__FILE__,__LINE__);
                break;
            }
            if(msg_type->valueint==CMD_FOOD_IN2000)
            {
                open_relay=1;
            }
            process_food_in_out(msg_type->valueint,atoi(feeder_id->valuestring),amount->valueint,msg_uuid->valueint);
            break;

        case CMD_CTL_LED2004:
        case CMD_ST_PERIOD2014:

            if(CMD_CTL_LED2004==msg_type->valueint)
            {

                amount     = cJSON_GetObjectItem( root, "color");
                if(amount==NULL ||amount->type!=cJSON_Number)
                {
                    printf("amount null err :%s %d\r\n",__FILE__,__LINE__);
                    break;
                }

            }
            else         if(CMD_ST_PERIOD2014==msg_type->valueint)
            {

                amount     = cJSON_GetObjectItem( root, "sow_period");
                if(amount==NULL ||amount->type!=cJSON_Number)
                {
                    printf("amount null err :%s %d\r\n",__FILE__,__LINE__);
                    break;
                }

            }

            process_led_period(msg_type->valueint,atoi(feeder_id->valuestring),amount->valueint,msg_uuid->valueint);


            break;
        case CMD_CTL_UI2006:
        case CMD_CTL_ZERO2008:
        case  CMD_CTL_ONLINE2010:
        case CMD_RD_SENSORS2012:
            if(CMD_CTL_UI2006==msg_type->valueint)
            {

                amount     = cJSON_GetObjectItem( root, "ui_number");
                if(amount==NULL ||amount->type!=cJSON_Number)
                {
                    printf("amount null err :%s %d\r\n",__FILE__,__LINE__);
                    break;
                }

            }
            process_06_12_in_out(msg_type->valueint,list_number,list,amount->valueint,msg_uuid->valueint);
            break;
        case REQUEST_NET_INFOR_3000:
        case REQUEST_DEVICE_INFOR_3002:
        case REQUEST_MQTT_INFOR_3004:
            if(REQUEST_NET_INFOR_3000==msg_type->valueint)
            {
                //void send_result_to_net1(int cmd,int msg_uuid,uint8_t feed_id,uint8_t code,STU_DATAS studata)
                send_result_to_net1(msg_type->valueint,msg_uuid->valueint,0,0,StuDatas);
            }
            if(REQUEST_DEVICE_INFOR_3002==msg_type->valueint)
            {
                //process_06_12_in_out

                process_ask_pigs_info(msg_type->valueint,atoi(feeder_id->valuestring),amount->valueint,msg_uuid->valueint);
            }
            if(REQUEST_MQTT_INFOR_3004==msg_type->valueint)
            {
#if 1
                amount     = cJSON_GetObjectItem( root, "host");

                if (amount->type != cJSON_String) goto END1;
                memset(StuHis.StuPara.remote_ip,0,strlen((char*)StuHis.StuPara.remote_ip));
                memcpy(StuHis.StuPara.remote_ip,amount->valuestring,strlen(amount->valuestring));
                amount =  amount->next;

                if (amount->type != cJSON_Number) goto END1;
                StuHis.StuPara.remote_port = amount->valueint;
                amount =  amount->next;

                if (amount->type != cJSON_Number) goto END1;
                StuHis.StuPara.net_connect_state =  amount->next->valueint;
                amount =  amount->next;

                if (amount->type != cJSON_String) goto END1;
                memset(StuHis.StuPara.username,0,strlen((char*)StuHis.StuPara.username));
                memcpy(StuHis.StuPara.username,amount->valuestring,strlen(amount->valuestring));
                amount =  amount->next;

                if (amount->type != cJSON_String) goto END1;
                memset(StuHis.StuPara.password,0,strlen((char*)StuHis.StuPara.password));
                memcpy(StuHis.StuPara.password,amount->valuestring,strlen(amount->valuestring));
                amount =  amount->next;

                if (amount->type != cJSON_Number) goto END1;
                StuHis.StuPara.keepAliveInterval = amount->valueint;
                amount =  amount->next;

                if (amount->type != cJSON_Number) goto END1;
                StuHis.StuPara.qos = amount->valueint;
                amount =  amount->next;

                if (amount->type != cJSON_Number) goto END1;
                StuHis.StuPara.cleansession = amount->valueint;
                amount =  amount->next;

                if (amount->type != cJSON_String) goto END1;
                memset(StuHis.StuPara.clientID,0,strlen((char*)StuHis.StuPara.clientID));
                memcpy(StuHis.StuPara.clientID,amount->valuestring,strlen(amount->valuestring));
                amount =  amount->next;

                if (amount->type != cJSON_Number) goto END1;
                StuHis.StuPara.registered = amount->valueint;

#endif
                send_result_to_net1(msg_type->valueint,msg_uuid->valueint,0,0,StuDatas);

                AnsyHis();
                delay_ms(1000);
                WriteFlgBootSys();
            }
            break;





    }



END1:
    myfree_mmc(list);
    if (root)
        cJSON_Delete(root);


}







STU_DATAS stu_datas_tx[MAX_ELE_PACKETS];
STU_DATAS stu_datas_rx[MAX_ELE_PACKETS];

STU_QUEUE_MALLOC stu_queue_malloc_tx;
STU_QUEUE_MALLOC stu_queue_malloc_rx;


void task_app(void * pvParameters)
{
    uint8_t data;
    uint8_t *pdata;
    uint16_t len;
    uint8_t tick_sec=0;


    queue_malloc_init(&stu_queue_malloc_tx,stu_datas_tx,MAX_ELE_PACKETS);
    queue_malloc_init(&stu_queue_malloc_rx,stu_datas_rx,MAX_ELE_PACKETS);




    for( ;; )
    {
        IWDG_Feed();
        task_ansy_his();
        while ( true==queue_byte_out(&uart_queue,&data) )
        {
            uart_unpackage_data(data,task_protocol_dataout_fun);
        }

        if(0!=(pdata=queue_malloc_out(&stu_queue_malloc_rx,&len)))
        {
            ana_net_datas(pdata,len);
            queue_malloc_delete(&stu_queue_malloc_rx,1);
        }
        if(tick_sec++>=100)
        {
            check_on_line();
            LED1_TOG();
            if(net_connect_flg)
            {
                LED2_ON();

            }
            else
            {
                LED2_OFF();

            }
            check_wiat_list_result();
            tick_sec=0;


        }
        vTaskDelay(10/portTICK_RATE_MS);
    }
}

