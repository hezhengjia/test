#include "ntp_client.h"
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/api.h"


#define NTP_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )


char * ntp_server_list[] = {"1.cn.pool.ntp.org",
                            NULL
                            };
ip_addr_t   ntp_server_addr;
struct tm * synchronized_local_time; 
uint32_t Org_Timestamp; // Time at the client when the request departed for the server
uint32_t Receive_Timestamp; //Time at the server when the request arrived from the client
uint32_t Transmit_Timestamp; //Time at the server when the response left for the client
uint32_t Destination_Timestamp; // Time at the client when the reply arrived from the server

static void ntp_process(uint32_t timestamp);
static void ntp_request(void);
//static uint32_t ntp_get_currenttime(void);

extern void RTC_CalendarShow(void);
extern  void RTC_CalendarUpdate(struct tm * newtime);
//extern void RTC_GetTime(struct tm * localtime);

//static uint32_t ntp_get_currenttime(void)
//{
//    struct tm  localtm;
//    uint32_t ntp_timestamp;
//  
//     RTC_GetTime(&localtm);
//     ntp_timestamp = mktime(&localtm) + DIFF_SEC_1900_1970;
//     
//     return ntp_timestamp;
//}

/**
  * @brief  process the time obtained from NTP server.
            Change it to a human-readable format. And consider the timezone
            The NTP timestamp use 1900 as epoch, but the input param of gmtime() function consider 1970 as epoch.
  * @param  None
  * @retval None
  */
static void ntp_process(uint32_t timestamp)
{
  uint32_t local_ntp_timestamp; 

  //minus the difference value of 1900 epoch and 1970 epoch
  local_ntp_timestamp = timestamp - DIFF_SEC_1900_1970;
  
  //consider the time zone
  local_ntp_timestamp += SEC_TIME_ZONE;
  
  //conver to human-readable format
  synchronized_local_time = gmtime(&local_ntp_timestamp);  
  
}

static void ntp_request(void)
{
  struct netconn * conn= NULL;
  struct netbuf * buf = NULL;
  uint8_t   ntp_request_buf[NTP_PKT_LEN];
  uint8_t*  ntp_receive_buf_p;
  uint16_t buf_len;
  err_t err;
  //get ntp server address
#if USE_DNS
  if(netconn_gethostbyname(ntp_server_list[0],&ntp_server_addr)!=ERR_OK)
  {
    IP4_ADDR(&ntp_server_addr, NTP_Server_ADDR0, NTP_Server_ADDR1, NTP_Server_ADDR2, NTP_Server_ADDR3); 
  }
#else
  IP4_ADDR(&ntp_server_addr, NTP_Server_ADDR0, NTP_Server_ADDR1, NTP_Server_ADDR2, NTP_Server_ADDR3);
#endif
  
    //Create new netconn
  conn = netconn_new(NETCONN_UDP);
  
  if(conn!= NULL)
  {
    buf = netbuf_new();
    if(buf != NULL)
    {
        //initialize ntp packet to 0
        memset(ntp_request_buf, 0, NTP_PKT_LEN);
        //buid ntp packet
        ntp_request_buf[0] = NTP_LI_NO_WARNING|NTP_VERSION|NTP_MODE_CLIENT;
       
        err = netbuf_ref(buf,ntp_request_buf,NTP_PKT_LEN);
        if(err ==ERR_OK)
        {
            //connect to NTP server
            err = netconn_connect(conn,&ntp_server_addr,NTP_PORT);
            if(err == ERR_OK)
            {           
                //send ntp request to ntp server
                if(netconn_send(conn,buf)!=ERR_OK)
                {
  
                }
                netbuf_delete( buf );
                //reveive ntp response
                netconn_recv(conn,&buf);
                            
                netbuf_data(buf,(void**)&ntp_receive_buf_p,&buf_len);
                
                //check ntp packet
                if(buf_len==NTP_PKT_LEN)
                {
                  if(((ntp_receive_buf_p[0]& NTP_MODE_MASK) == NTP_MODE_SERVER)|| ((ntp_receive_buf_p[0] & NTP_MODE_MASK) == NTP_MODE_BROADCAST))
                  {
                    // extract time from packet
                    Receive_Timestamp = ntp_receive_buf_p[RECEIVE_TS_OFFSET]<<24 | ntp_receive_buf_p[RECEIVE_TS_OFFSET+1]<<16|
                                        ntp_receive_buf_p[RECEIVE_TS_OFFSET+2]<<8 |ntp_receive_buf_p[RECEIVE_TS_OFFSET+3];
                    Transmit_Timestamp = ntp_receive_buf_p[TRANSMIT_TS_OFFSET]<<24 | ntp_receive_buf_p[TRANSMIT_TS_OFFSET+1]<<16|
                                        ntp_receive_buf_p[TRANSMIT_TS_OFFSET+2]<<8 |ntp_receive_buf_p[TRANSMIT_TS_OFFSET+3];
                    // start conver time format
                    ntp_process(Transmit_Timestamp);
                  }
                }
                
                netconn_close(conn);
                netconn_delete(conn); 
                netbuf_delete( buf );
            }
            else
            {
              netconn_delete(conn); 
              netbuf_delete( buf ); 
            }
        }
        else//
        {
          netconn_delete(conn); 
           netbuf_delete( buf );
           
        }
    }
    else //buf ==NULL
    {
      netconn_delete(conn);
    }
  }
  //process
}

static void ntp_thread(void *arg)
{
  while(1)
  {
    /*#-send ntp request ##############################*/
    ntp_request();
    
    /*#-update local time #############################*/
    printf("RTC time before update\n");
    RTC_CalendarShow();
    
    RTC_CalendarUpdate(synchronized_local_time);
    
    /*display local time*/
    printf("RTC time after update\n");
    RTC_CalendarShow();
    
    /*#-delay 1min ######################################*/
    osDelay(60*1000);
  }
  
}

void ntp_client_init(void)
{
  sys_thread_new("ntp_thread", ntp_thread, NULL, DEFAULT_THREAD_STACKSIZE, NTP_THREAD_PRIO);
}